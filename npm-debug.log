0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/bin/node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@3.10.3
3 info using node@v6.4.0
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   escapedName: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/home/mvillarreal/Marco/workspace/workspaceLibrerias/module-loader',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /home/mvillarreal/.npm/@mvillarrealb/module-loader/0.0.1/package.tgz not in flight; packing
9 verbose correctMkdir /home/mvillarreal/.npm correctMkdir not in flight; initializing
10 info lifecycle @mvillarrealb/module-loader@0.0.1~prepublish: @mvillarrealb/module-loader@0.0.1
11 silly lifecycle @mvillarrealb/module-loader@0.0.1~prepublish: no script for prepublish, continuing
12 verbose tar pack [ '/home/mvillarreal/.npm/@mvillarrealb/module-loader/0.0.1/package.tgz',
12 verbose tar pack   '/home/mvillarreal/Marco/workspace/workspaceLibrerias/module-loader' ]
13 verbose tarball /home/mvillarreal/.npm/@mvillarrealb/module-loader/0.0.1/package.tgz
14 verbose folder /home/mvillarreal/Marco/workspace/workspaceLibrerias/module-loader
15 verbose addLocalTarball adding from inside cache /home/mvillarreal/.npm/@mvillarrealb/module-loader/0.0.1/package.tgz
16 verbose correctMkdir /home/mvillarreal/.npm correctMkdir not in flight; initializing
17 silly cache afterAdd @mvillarrealb/module-loader@0.0.1
18 verbose afterAdd /home/mvillarreal/.npm/@mvillarrealb/module-loader/0.0.1/package/package.json not in flight; writing
19 verbose correctMkdir /home/mvillarreal/.npm correctMkdir not in flight; initializing
20 verbose afterAdd /home/mvillarreal/.npm/@mvillarrealb/module-loader/0.0.1/package/package.json written
21 silly publish { name: '@mvillarrealb/module-loader',
21 silly publish   version: '0.0.1',
21 silly publish   author: { name: 'Marco Villarreal' },
21 silly publish   license: 'MIT',
21 silly publish   homepage: 'https://github.com/mvillarrealb/module-loader',
21 silly publish   repository:
21 silly publish    { type: 'git',
21 silly publish      url: 'git://github.com/mvillarrealb/module-loader.git' },
21 silly publish   description: 'Light module loader based on nodejs fs, uses async and sync mode',
21 silly publish   main: 'index.js',
21 silly publish   directories: { test: 'test' },
21 silly publish   scripts: { test: 'mocha -R spec -b test/tests.js' },
21 silly publish   keywords:
21 silly publish    [ 'module loader',
21 silly publish      'dynamic require',
21 silly publish      'async load',
21 silly publish      'sync load',
21 silly publish      'fs' ],
21 silly publish   engines: { node: '>= 6.4.0' },
21 silly publish   devDependencies: { chai: '^3.5.0', mocha: '^3.2.0' },
21 silly publish   readme: 'node-module-loader\n==============\n\nLite synchronous and asynchronous module loader to make a dynamic use of\n**require** on a specified directory.\n\n## Installation\n\n```shell\n\n  npm install node-module-loader --save\n\n```\n\n## General\n\nmodule-loader is a node module that can be used to easyly include your own\ncode digging directories using native node fs module.\n\n## Usage\n\nmodule-loader has to basic methods\n\n__loadModulesSync: ({\n  baseDirectory = null,\n  moduleHolder = null,\n  doNotInclude = [],\n  namingStrategy = defaultNamingStrategy\n},loaderFunction)__\n\nLoad modules in a synchronous way, this method receives two params\n\n* options: Options to perform the module loading;\n  * baseDirectory(String): Base directory where all the loading will begin\n  * moduleHolder(Object): Target Object, this object will receive every require(..) as a property according to the naming strategy\n  * doNotInclude(Array): An array of files or paths to be excluded\n  * namingStrategy(Function): A function used to name each property in moduleHolder object, the namingStrategy is a function which receives the loaded module full path, and the module itself. Inside this function you will have the freedom to determine which name the module will have over the holder, by default\n  the naming strategy will use the file\'s name, for example Category.js will become Category, however you can implement whatever strategy is suitable by\n  your use case.\n\n* loaderFunction: loaderFunction is the function used to involve require(..) calls\nyou must return a require(module..) with your specific constructors for the module.\n\n\n\n__loadModulesSync: ({\n  baseDirectory = null,\n  moduleHolder = null,\n  doNotInclude = [],\n  namingStrategy = defaultNamingStrategy\n},loaderFunction,loadDone)__\n\nLoad modules in a asynchronous way, this method receives three params\n\n* options: Options to perform the module loading;\n  * baseDirectory(String): Base directory where all the loading will begin require(..) as a property according to the naming strategy\n  * doNotInclude(Array): An array of files or paths to be excluded\n  * namingStrategy(Function): A function used to name each property in moduleHolder object, the namingStrategy is a function which receives the loaded module full path, and the module itself. Inside this function you will have the freedom to determine which name the module will have over the holder, by default\n  the naming strategy will use the file\'s name, for example Category.js will become Category, however you can implement whatever strategy is suitable by\n  your use case.\n\n* loaderFunction: loaderFunction is the function used to involve require(..) calls\nyou must return a require(module..) with your specific constructors for the module.  \n\n* loadDone: Callback function which marks the loading process as done, it will receive as a parameter the object holder, in this case the holder is provided by the function itself.\n\n## Use cases\n\nYou can ask yourself, why would I need a f**ng module loader? here are some useful\nuse cases\n\n### Sequelize\'s ORM boilerplate index\nThe main create this module was to reduce the boilerplate used to load sequelize\'s\nORM models into a single db property, the example is as follows:\n\n```javascript\n"use strict"\n\nmodule.exports = function() {\n  const moduleLoader = require("module-loader");\n  const Sequelize = require("sequelize");\n  const sequelize = new Sequelize(...);\n\n  const path = require("path");\n\n  let db = {};\n\n  moduleLoader.loadModulesSync({\n    baseDirectory: path.join(__dirname),//Path to start lstat(current directory)\n    moduleHolder: db,//Holder which will receive require(..)\n    doNotInclude: [ //array of directories, or files to exclude\n      "index.js"//exclude self to avoid maximum stack call exceed :)\n    ]\n  },(moduleLoaded) => {\n    //According to sequelize\'s page you have define your modules as self\n    //contained functions which receive sequelize connection and base sequelize as //parameter\n    return require(moduleLoaded)(sequelize,Sequelize);\n  });\n\n  Object.keys(db).forEach((modelName) => {\n    if ("associate" in db[modelName]) {\n      db[modelName].associate(db);\n    }\n  });\n\n  db.sequelize = sequelize;\n  db.Sequelize = Sequelize;\n\n  return db;\n}\n\n```\n\n### Express\'s middleware grouping\n\nWhen developing express\'s applications is almost an imperative requirement to develop middlewares, those fancy functions which executes before, or after your http call. In some cases express applications may have a lot of middleware to be used so may come in handy to have every middleware available.\n\n```javascript\n\nconst moduleLoader = require("module-loader");\nconst path = require("path");\n\nlet middleware = {};\n\nmoduleLoader.loadModulesSync({\n  baseDirectory: path.join(__dirname),//Path to start lstat(current directory)\n  moduleHolder: middleware,//Holder which will receive require(..)\n  doNotInclude: [ //array of directories, or files to exclude\n    "index.js"//exclude self to avoid maximum stack call exceed :)\n  ]\n},(moduleLoaded) => {\n  return require(moduleLoaded)();\n});\n\nmodule.exports =  middleware;\n.\n.\n//in your further script you can use the middleware by just requiring the directory\'s index\nconst middleware = require("./middleware");\n\nconsole.log(middleware);//this object will hold all your middleware\n\n```\n\n### Everything wich requires to collect a group of modules into a "holder"\n\nIf you found yourself in the need to use an object which collects modules from\na directory, then module-loader may be suitable for your needs, it does not require any additional node modules and uses native node\'s fs module\n\n## Tests\n\n```shell\n  npm test\n```\n',
21 silly publish   readmeFilename: 'README.md',
21 silly publish   gitHead: 'df1bac763d0d51ba5926abcea345c807a7840d90',
21 silly publish   bugs: { url: 'https://github.com/mvillarrealb/module-loader/issues' },
21 silly publish   _id: '@mvillarrealb/module-loader@0.0.1',
21 silly publish   _shasum: '10a2db1b8407246d06f1c3689059cd1229e715d1',
21 silly publish   _from: '.' }
22 verbose getPublishConfig undefined
23 silly mapToRegistry name @mvillarrealb/module-loader
24 silly mapToRegistry scope (from package name) @mvillarrealb
25 verbose mapToRegistry no registry URL found in name for scope @mvillarrealb
26 silly mapToRegistry using default registry
27 silly mapToRegistry registry https://registry.npmjs.org/
28 silly mapToRegistry data Result {
28 silly mapToRegistry   raw: '@mvillarrealb/module-loader',
28 silly mapToRegistry   scope: '@mvillarrealb',
28 silly mapToRegistry   escapedName: '@mvillarrealb%2fmodule-loader',
28 silly mapToRegistry   name: '@mvillarrealb/module-loader',
28 silly mapToRegistry   rawSpec: '',
28 silly mapToRegistry   spec: 'latest',
28 silly mapToRegistry   type: 'tag' }
29 silly mapToRegistry uri https://registry.npmjs.org/@mvillarrealb%2fmodule-loader
30 verbose publish registryBase https://registry.npmjs.org/
31 silly publish uploading /home/mvillarreal/.npm/@mvillarrealb/module-loader/0.0.1/package.tgz
32 verbose request uri https://registry.npmjs.org/@mvillarrealb%2fmodule-loader
33 verbose request sending authorization for write operation
34 info attempt registry request try #1 at 3:43:30 PM
35 verbose request using bearer token for auth
36 verbose request id 7cdf646af810ff07
37 http request PUT https://registry.npmjs.org/@mvillarrealb%2fmodule-loader
38 http 402 https://registry.npmjs.org/@mvillarrealb%2fmodule-loader
39 verbose headers { 'content-type': 'application/json',
39 verbose headers   'cache-control': 'max-age=0',
39 verbose headers   'content-length': '119',
39 verbose headers   'accept-ranges': 'bytes',
39 verbose headers   date: 'Sat, 24 Dec 2016 20:13:31 GMT',
39 verbose headers   via: '1.1 varnish',
39 verbose headers   connection: 'keep-alive',
39 verbose headers   'x-served-by': 'cache-jfk8136-JFK',
39 verbose headers   'x-cache': 'MISS',
39 verbose headers   'x-cache-hits': '0',
39 verbose headers   'x-timer': 'S1482610410.773369,VS0,VE757' }
40 verbose request invalidating /home/mvillarreal/.npm/registry.npmjs.org/_40mvillarrealb_252fmodule-loader on PUT
41 error publish Failed PUT 402
42 verbose stack Error: You need a paid account to perform this action. For more info, visit: https://www.npmjs.com/private-modules : @mvillarrealb/module-loader
42 verbose stack     at makeError (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:264:12)
42 verbose stack     at CachingRegistryClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:252:14)
42 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:172:14)
42 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:200:22)
42 verbose stack     at emitTwo (events.js:106:13)
42 verbose stack     at Request.emit (events.js:191:7)
42 verbose stack     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1067:10)
42 verbose stack     at emitOne (events.js:101:20)
42 verbose stack     at Request.emit (events.js:188:7)
42 verbose stack     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:988:12)
43 verbose statusCode 402
44 verbose pkgid @mvillarrealb/module-loader
45 verbose cwd /home/mvillarreal/Marco/workspace/workspaceLibrerias/module-loader
46 error Linux 4.4.0-53-generic
47 error argv "/usr/local/bin/node" "/usr/local/bin/npm" "publish"
48 error node v6.4.0
49 error npm  v3.10.3
50 error code E402
51 error You need a paid account to perform this action. For more info, visit: https://www.npmjs.com/private-modules : @mvillarrealb/module-loader
52 error If you need help, you may report this error at:
52 error     <https://github.com/npm/npm/issues>
53 verbose exit [ 1, true ]
